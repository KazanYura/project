{"version":3,"sources":["components/Home.js","elements/Pokedex.js","charts/RadarStats.js","charts/TableChart.js","components/PokedexBasic.js","charts/BubbleChart.js","components/Legendary.js","charts/LegendBubble.js","charts/LegendToType.js","charts/PseudoLegendToType.js","components/NewLeg.js","App.js","index.js"],"names":["Home","id","React","Component","TypeToColor","MapChart","imageName","pokemon","includes","className","style","backgroundColor","textAlign","width","float","border","padding","borderTop","src","process","paddingBottom","memo","RadarStats","this","props","data","field","value","parseInt","message","stats","Math","max","cx","cy","outerRadius","height","dataKey","stroke","fill","fillOpacity","PureComponent","jsfiddleUrl","affectiveAgainst","type","v","parseFloat","TableChart","colspan","PokedexBasic","state","PokemonName","isSelected","options","data_import","JSON","parse","localStorage","getItem","Object","entries","forEach","element","push","label","placeholder","onChange","option","setState","margin","Pokedex","BubbleChart","type_to_stats","found","index","length","e","spa","a","speed","def","spdef","c","top","right","bottom","left","name","cursor","strokeDasharray","map","entry","Legendary","legen_stats","sub_legend_stats","normal_stats","weight","unit","RADIAN","PI","renderCustomizedLabel","midAngle","innerRadius","percent","radius","x","cos","y","sin","textAnchor","dominantBaseline","toFixed","LegendToType","legend_to_type","counter","labelLine","PseudoLegendToType","NewLeg","App","useEffect","csv","then","clear","setItem","stringify","to","exact","path","component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7b7fa0e3.chunk.js","sourcesContent":["import React from \"react\";\nimport '../style/home.css';\nclass Home extends React.Component{\n\n    render(){\n        return(\n    <div id=\"main_body\">\n      <h1>Опис:</h1>\n      <p>Цей сайт був розроблений,як виконання проєкту з курсу \"Візуалізація данних\". \n        На кожній сторінці колір відповідає певному типу.\n      </p>\n      <p>У проєкті є наступнимі сторінки:</p>\n        <ol>\n          <li><strong>Pokedex</strong>: сторінка,що показує сильні і слабкі сторони кожного окремовзятого покемона</li>\n          <li><strong>Порівняння типів</strong>: згідно назви показує сильні та слабкі сторони кожного типу.</li>\n          <li><strong>Легендарність</strong>: сторінка,що показує зв'язок легендарності та розміру з вагою</li>\n        </ol>\n      <p><strong>Автор: Казан Юрій</strong></p>\n    </div>)\n    }\n}\nexport default Home;","import React, { memo } from \"react\";\n\nconst TypeToColor  = {\n    \"Normal\":\"#A8A77A\",\n    \"Fire\":  \"#EE8130\",\n    \"Water\":  \"#6390F0\",\n    \"Electric\":  \"#F7D02C\",\n    \"Grass\":  \"#7AC74C\",\n    \"Ice\":  \"#96D9D6\",\n    \"Fighting\":  \"#C22E28\",\n    \"Poison\":  \"#A33EA1\",\n    \"Ground\":  \"#E2BF65\",\n    \"Flying\":  \"#A98FF3\",\n    \"Psychic\":  \"#F95587\",\n    \"Bug\":  \"#A6B91A\",\n    \"Rock\":  \"#B6A136\",\n    \"Ghost\":  \"#735797\",\n    \"Dragon\":  \"#6F35FC\",\n    \"Dark\":  \"#705746\",\n    \"Steel\":  \"#B7B7CE\",\n    \"Fairy\":  \"#D685AD\", \n}\nconst MapChart = ({ pokemon }) => {\n    let imageName;\n\n    if (pokemon[\"name\"].includes(\"Mega \")){\n        if ((pokemon[\"name\"].includes(\"Mega \")) && (pokemon[\"name\"].includes(\" X\")))\n        imageName = pokemon[\"pokedex_number\"] + \"-mega-x\";\n        else {\n            if ((pokemon[\"name\"].includes(\"Mega \")) && (pokemon[\"name\"].includes(\" Y\")))\n            imageName = pokemon[\"pokedex_number\"] + \"-mega-y\";\n            else \n            imageName = pokemon[\"pokedex_number\"] + \"-mega\";\n        }\n    }\n    else {\n        imageName = pokemon[\"pokedex_number\"]\n    }\n  return (\n    <>\n    <div className=\"pokedex\" style={{backgroundColor:TypeToColor[pokemon[\"type_1\"]], textAlign:\"center\", width:\"350px\",float:\"right\",border:\"3px solid black\"}}>\n        <div className=\"nameHolder\" style={{padding:\"5%\"}}>\n            <h2>#{pokemon[\"pokedex_number\"]}  {pokemon[\"name\"]}</h2>\n        </div>\n        <div className=\"imageHolder\" style={{borderTop:\"3px solid black\",padding:\"5%\"}}>\n            <img src={process.env.PUBLIC_URL + \"/images/pokemon_jpg/\" + imageName + \".jpg\"}/>\n        </div>\n        <div className=\"statsHolder\" style={{paddingBottom:\"20px\"}}>\n            <div style={{borderTop:\"3px solid black\"}}>\n            <h3>Type</h3>\n            <ul>\n                <li>\n                    {pokemon[\"type_1\"]}\n                    </li>\n                    <li>\n                        {pokemon[\"type_2\"]}\n                    </li>\n                </ul>\n            </div>\n            <div style={{borderTop:\"3px solid black\"}}>\n            <h3>Abilities:</h3>\n                <ul>\n                    <li>\n                        {pokemon[\"ability_1\"]}\n                    </li>\n                    <li>\n                        {pokemon[\"ability_2\"]}\n                    </li>\n                    <li>\n                        {pokemon[\"ability_hidden\"]}\n                    </li>\n                </ul>\n                </div>\n                <div style={{borderTop:\"3px solid black\"}}>\n                <h3>Stats:</h3>\n                <ul>\n                    <li>\n                        HP: {pokemon[\"hp\"]}\n                    </li>\n                    <li>\n                        Attack: {pokemon[\"attack\"]}\n                    </li>\n                    <li>\n                        Defense: {pokemon[\"defense\"]}\n                    </li>\n                    <li>\n                        Special Attack: {pokemon[\"sp_attack\"]}\n                    </li>\n                    <li>\n                        Special Defense: {pokemon[\"sp_defense\"]}\n                    </li>\n                    <li>\n                        Speed: {pokemon[\"speed\"]}\n                    </li>\n                </ul>\n                </div>\n        </div>\n    </div>\n    </>\n  );\n};\n\nexport default memo(MapChart);","import React, { PureComponent } from 'react';\n\nimport {\n  Radar, RadarChart, PolarGrid, PolarAngleAxis, PolarRadiusAxis,\n} from 'recharts';\n\nexport default class RadarStats extends PureComponent {\n    static jsfiddleUrl = 'https://jsfiddle.net/alidingling/6ebcxbx4/';  \n    render(){\n        let pokemon = this.props.pokemon;\n      let data = [              \n        {field:\"HP\",value : parseInt(pokemon[\"hp\"])},\n        {field:\"Attack\", value :  parseInt(pokemon[\"attack\"])},\n        {field:\"Defense\",value: parseInt(pokemon[\"defense\"])},\n        {field:\"Special Attack\",value: parseInt(pokemon[\"sp_attack\"])},\n        {field:\"Special Defense\",value: parseInt(pokemon[\"sp_defense\"])},\n        {field:\"Speed\",value: parseInt(pokemon[\"speed\"])}];\n        let message = \"\";\n        let stats = [parseInt(pokemon[\"attack\"]), parseInt(pokemon[\"defense\"]),parseInt(pokemon[\"sp_attack\"]),parseInt(pokemon[\"sp_defense\"]) ]\n        switch (Math.max(...stats)){\n            case parseInt(pokemon[\"attack\"]):\n                message = \"Pokemon \" + pokemon[\"name\"] + \" is physical damager\";\n                break;\n            case parseInt(pokemon[\"defense\"]):\n                message = \"Pokemon \" + pokemon[\"name\"] + \" is physical tank\";\n                break;\n            case parseInt(pokemon[\"sp_attack\"]):\n                message = \"Pokemon \" + pokemon[\"name\"] + \" is special damager\";\n                break;\n            case parseInt(pokemon[\"sp_defense\"]):\n                message = \"Pokemon \" + pokemon[\"name\"] + \" is special tank\";\n                break;\n        }\n      return (\n          <div>\n            <h3>{message}</h3>\n        <RadarChart cx={400} cy={180} outerRadius={150} width={600} height={450} data={data}>\n          <PolarGrid />\n          <PolarAngleAxis dataKey=\"field\" />\n          <PolarRadiusAxis />\n          <Radar dataKey=\"value\" stroke=\"#8884d8\" fill=\"#8884d8\" fillOpacity={0.6} />\n        </RadarChart>\n        </div>\n      );\n  }\n}","const affectiveAgainst = (type,pokemon) => {\n    let type_m = \"against_\" + type;\n    let v = parseFloat(pokemon[type_m])\n    if (v > 1)\n        return \"effective\";\n    if (v === 1)\n        return \"neutral\";\n    if (v === 0)\n        return \"zero\"\n    return \"not_eff\"\n}\nconst TableChart = ({ pokemon }) => {\n    return(\n            <table>\n    <thead>\n        <tr>\n            <th colspan=\"18\">Таблиця слабкостей</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td> Normal</td>\n            <td>Fire</td>\n            <td>Water</td>\n            <td>Electric</td>\n            <td>Grass</td>\n            <td>Ice</td>\n            <td>Fight</td>\n            <td>Poison</td>\n            <td>Ground</td>\n            <td>Flying</td>\n            <td>Psychic</td>\n            <td>Bug</td>\n            <td>Rock</td>\n            <td>Ghost</td>\n            <td>Dragon</td>\n            <td>Dark</td>\n            <td>Steel</td>\n            <td>Fairy</td>\n        </tr>\n        <tr>\n        <td className={affectiveAgainst(\"normal\",pokemon)}> {pokemon[\"against_normal\"]}</td>\n        <td className={affectiveAgainst(\"fire\",pokemon)}> {pokemon[\"against_fire\"]}</td>\n        <td className={affectiveAgainst(\"water\",pokemon)}> {pokemon[\"against_water\"]}</td>\n        <td className={affectiveAgainst(\"electic\",pokemon)}> {pokemon[\"against_electric\"]}</td>\n        <td className={affectiveAgainst(\"grass\",pokemon)}> {pokemon[\"against_grass\"]}</td>\n        <td className={affectiveAgainst(\"ice\",pokemon)}> {pokemon[\"against_ice\"]}</td>\n        <td className={affectiveAgainst(\"fight\",pokemon)}> {pokemon[\"against_fight\"]}</td>\n        <td className={affectiveAgainst(\"poison\",pokemon)}> {pokemon[\"against_poison\"]}</td>\n        <td className={affectiveAgainst(\"ground\",pokemon)}> {pokemon[\"against_ground\"]}</td>\n        <td className={affectiveAgainst(\"flying\",pokemon)}> {pokemon[\"against_flying\"]}</td>\n        <td className={affectiveAgainst(\"psychic\",pokemon)}> {pokemon[\"against_psychic\"]}</td>\n        <td className={affectiveAgainst(\"bug\",pokemon)}> {pokemon[\"against_bug\"]}</td>\n        <td className={affectiveAgainst(\"rock\",pokemon)}> {pokemon[\"against_rock\"]}</td>\n        <td className={affectiveAgainst(\"ghost\",pokemon)}> {pokemon[\"against_ghost\"]}</td>\n        <td className={affectiveAgainst(\"dragon\",pokemon)}> {pokemon[\"against_dragon\"]}</td>\n        <td className={affectiveAgainst(\"dark\",pokemon)}> {pokemon[\"against_dark\"]}</td>\n        <td className={affectiveAgainst(\"steel\",pokemon)}> {pokemon[\"against_steel\"]}</td>\n        <td className={affectiveAgainst(\"fairy\",pokemon)}> {pokemon[\"against_fairy\"]}</td>\n        </tr>\n    </tbody>\n</table>\n) \n}\nexport default TableChart;\n","import React from 'react';\nimport '../style/views.css';\nimport Dropdown from 'react-dropdown';\nimport 'react-dropdown/style.css';\nimport Pokedex from '../elements/Pokedex';\nimport RadarStats from '../charts/RadarStats';\nimport TableChart from '../charts/TableChart';\nclass PokedexBasic extends React.Component{\n    state = {\n        PokemonName: 1,\n        isSelected:false,\n    }\n    render(){\n        let options = [];\n        let data_import = JSON.parse(localStorage.getItem('data'));\n        Object.entries(data_import).forEach(element => {\n            if (!element[1][\"name\"].includes(\"Alolan\") && !element[1][\"name\"].includes(\"Galarian \") && !element[1][\"name\"].includes(\"Partner \"))\n            options.push({ value: element[1], label: element[1][\"name\"] },);\n        });\n        return(\n            <div id=\"main_body\">\n                <Dropdown options={options} value={this.state.PokemonName[\"name\"]} placeholder=\"Choose your Pokemon\" onChange={(option) => this.setState({PokemonName:option.value,isSelected:true})} />\n                <div className=\"chart_holder\" style={{margin:\"20px\"}}>\n                    <div>\n                        <h3>Опис сторінки:</h3>\n                        <p>Найпростіша із можливих візуалізацій,яка необхідна у контексті задачі - це візуалізація сильних сторін кожного Pokemon.<br/>\n                        З цією метою я надав два можливих відображення (радіо графік для порівняння характеристик між собою,щоб зрозуміти роль конкретного покемона в грі; та таблицю слабкостей проти інших типів)<br/>\n                        Над радіо графіком можна бачити висновок згідно характеристик (покемон є дамагером чи танком і якого типу.)<br/>\n                        Таким чином ця сторінка візуалізує сильні сторони покемона і показує проти кого і за яких умов його використовувати.<br/><br/>\n\n                        Для чого необхідно знати конкретно ці моменти:<br/>\n                        Числа у таблиці показують наскільки сильні пошкодження буде завдавати атака певного типу для даного покемона, графік же вказує на те, до якого типу атак більш стійкий покемон (Defense та Special Defense)<br/>\n                        Також показано,які типи атак вдаються покемону краще спеціальні чи фізичні (аналогічно до захисту). <br/>\n                        Це допомагає приймати рішення стосовно застосування того чи іншого покемона в грі.<br/>\n                        <br/>\n                        Як користуватися даною сторінкою: <br/>\n                        Для початку роботи просто необхідно обрати вгорі із випадаючого списку ім'я покемона. <br/>\n                        Далі всі необхідні компоненти буде показано.<br/>\n                        <br/>\n                        Пояснення до таблиці:<br/>\n                        У таблиці записано числа,які є множниками для шкоди від певного типу атак. Також клітинки мають певний колір,що характеризує тип як слабкість.<br/>\n                        </p>\n                        <ul>\n                            <li>\n                                Синій - множник 0 і як наслідок атака такого типу не нанесе жодної шкоди\n                            </li>\n                            <li>\n                                Червоний - множник 2 і вище, у таких випадках покемона краще не використовувати.\n                            </li>\n                            <li>\n                                Зелений - множник менший 1. Безпечна ситуація.\n                            </li>\n                            <li>\n                                 Білий - множник 1 (нейтральна шкода)\n                            </li>\n                        </ul>\n\n\n                    </div>\n\n                {this.state.isSelected && <div><RadarStats pokemon={this.state.PokemonName}/> <TableChart pokemon={this.state.PokemonName}/></div>}\n                {this.state.isSelected && <Pokedex pokemon={this.state.PokemonName}/>}\n                </div>\n            </div>)\n    }\n}\n\nexport default PokedexBasic;","import React, { PureComponent } from 'react';\nimport {\n  ScatterChart, Scatter, XAxis, YAxis, CartesianGrid, Tooltip, Cell, ZAxis\n} from 'recharts';\nconst TypeToColor  = {\n    \"Normal\":\"#A8A77A\",\n    \"Fire\":  \"#EE8130\",\n    \"Water\":  \"#6390F0\",\n    \"Electric\":  \"#F7D02C\",\n    \"Grass\":  \"#7AC74C\",\n    \"Ice\":  \"#96D9D6\",\n    \"Fighting\":  \"#C22E28\",\n    \"Poison\":  \"#A33EA1\",\n    \"Ground\":  \"#E2BF65\",\n    \"Flying\":  \"#A98FF3\",\n    \"Psychic\":  \"#F95587\",\n    \"Bug\":  \"#A6B91A\",\n    \"Rock\":  \"#B6A136\",\n    \"Ghost\":  \"#735797\",\n    \"Dragon\":  \"#6F35FC\",\n    \"Dark\":  \"#705746\",\n    \"Steel\":  \"#B7B7CE\",\n    \"Fairy\":  \"#D685AD\", \n}\nexport default class BubbleChart extends PureComponent {\n    static jsfiddleUrl = 'https://jsfiddle.net/alidingling/9Lfxjjty/';\n  \n    render() {\n        let data_import = JSON.parse(localStorage.getItem('data'));\n        let type_to_stats = [];\n            Object.entries(data_import).forEach(element => {\n                let found = false;\n                for (let index = 0; index < type_to_stats.length; index++) {\n                    let e = type_to_stats[index];\n                    if (e.type === element[1][\"type_1\"]){\n                        e.spa += parseInt(element[1][\"sp_attack\"]);\n                        e.a += parseInt(element[1][\"attack\"]);\n                        e.speed += parseInt(element[1][\"speed\"]);\n                        e.def += parseInt(element[1][\"defense\"])\n                        e.spdef += parseInt(element[1][\"sp_defense\"])\n                        e.c += 1;\n                        found = true;\n                        break;\n                    }\n                    \n                }\n                if (!found){\n                    type_to_stats.push({type:element[1][\"type_1\"],spa:parseInt(element[1][\"sp_attack\"]),a:parseInt(element[1][\"attack\"]),speed:parseInt(element[1][\"speed\"]),c:1,spdef:parseInt(element[1][\"sp_defense\"]),def:parseInt(element[1][\"defense\"])})\n                }\n\n        });\n        for (let index = 0; index < type_to_stats.length; index++) {\n            const element = type_to_stats[index];\n            element.spa = (element.spa / element.c);\n            element.a = (element.a / element.c);\n            element.def = (element.def / element.c);\n            element.spdef = (element.spdef / element.c);\n            element.speed = (element.speed / element.c);\n            \n        }\n      return (\n          <div className=\"chart_holder_edit\">\n\n             <div>\n               <h3>Характеристика - Атака</h3>\n        <ScatterChart\n          width={400}\n          height={400}\n          margin={{\n            top: 20, right: 20, bottom: 20, left: 20,\n          }}\n        >\n          <CartesianGrid />\n          <XAxis type=\"number\" dataKey=\"a\" name=\"Attack\"/>\n          <YAxis type=\"number\" dataKey=\"speed\" name=\"Speed\"/>\n          <ZAxis type=\"category\" dataKey=\"type\" name=\"Type\"/>\n          <Tooltip cursor={{ strokeDasharray: '3 3' }}  />\n          <Scatter data={type_to_stats} fill=\"#8884d8\">\n            {\n              type_to_stats.map((entry, index) => <Cell key={`cell-${index}`} fill={TypeToColor[entry.type]} />)\n            }\n          </Scatter>\n        </ScatterChart>\n        </div>\n        <div>\n          <h3>\n            Характеристика - Спец. Атака\n          </h3>\n        <ScatterChart\n          width={400}\n          height={400}\n          margin={{\n            top: 20, right: 20, bottom: 20, left: 20,\n          }}\n        >\n          <CartesianGrid />\n          <XAxis type=\"number\" dataKey=\"spa\" name=\"Special Attack\"/>\n          <YAxis type=\"number\" dataKey=\"speed\" name=\"Speed\"/>\n          <ZAxis type=\"category\" dataKey=\"type\" name=\"Type\"/>\n          <Tooltip cursor={{ strokeDasharray: '3 3' }}  />\n          <Scatter data={type_to_stats} fill=\"#8884d8\">\n            {\n              type_to_stats.map((entry, index) => <Cell key={`cell-${index}`} fill={TypeToColor[entry.type]} />)\n            }\n          </Scatter>\n        </ScatterChart>\n        </div>\n        <div>\n          <h3>\n            Характеристика - Захист\n          </h3>\n        <ScatterChart\n          width={400}\n          height={400}\n          margin={{\n            top: 20, right: 20, bottom: 20, left: 20,\n          }}\n        >\n          <CartesianGrid />\n          <XAxis type=\"number\" dataKey=\"def\" name=\"Defense\"/>\n          <YAxis type=\"number\" dataKey=\"speed\" name=\"Speed\"/>\n          <ZAxis type=\"category\" dataKey=\"type\" name=\"Type\"/>\n          <Tooltip cursor={{ strokeDasharray: '3 3' }}  />\n          <Scatter data={type_to_stats} fill=\"#8884d8\">\n            {\n              type_to_stats.map((entry, index) => <Cell key={`cell-${index}`} fill={TypeToColor[entry.type]} />)\n            }\n          </Scatter>\n        </ScatterChart>\n        </div>\n        <div>\n          <h3>Характеристика - Спец. Захист</h3>\n        <ScatterChart\n          width={400}\n          height={400}\n          margin={{\n            top: 20, right: 20, bottom: 20, left: 20,\n          }}\n        >\n          <CartesianGrid />\n          <XAxis type=\"number\" dataKey=\"spdef\" name=\"Special Defense\"/>\n          <YAxis type=\"number\" dataKey=\"speed\" name=\"Speed\"/>\n          <ZAxis type=\"category\" dataKey=\"type\" name=\"Type\"/>\n          <Tooltip cursor={{ strokeDasharray: '3 3' }}  />\n          <Scatter data={type_to_stats} fill=\"#8884d8\">\n            {\n              type_to_stats.map((entry, index) => <Cell key={`cell-${index}`} fill={TypeToColor[entry.type]} />)\n            }\n          </Scatter>\n        </ScatterChart>\n        </div>\n        </div>\n      );\n    }\n  }\n  ","import React from \"react\";\nimport '../style/home.css';\nimport BubbleChart from \"../charts/BubbleChart\";\nclass Legendary extends React.Component{\n\n    render(){\n        return(\n    <div id=\"main_body\">\n      <h1>Опис сторінки:</h1>\n      <p>Ця сторінка була розроблена для більше детального аналізу типів покемонів. <br/>\n          Загалом є 18 різних типів і кожен із них відображає певну властивість,але не всі з них логічно відповідають типу.<br/>\n          Розглянемо деякі такі моменти,що видимі із візуалізації <br/>\n          <ul>\n              <li>\n                  Як бачимо найвища атака у драконів (цей тип містить найбільшу кількість легендарних і псевдо-легендарних тому їх показники такі високі)\n              </li>\n              <li>\n                  Наступну сходинку по силі атаки займає Бойовий тип (Fighting),який природньо володіє невисокими показниками захистів.\n              </li>\n              <li>\n                  Найслабший в плані атаки Fairy тип. Ситуація із Спеціальною атакою трохи краща,але все ж низька.\n              </li>\n              <li>\n                  Психічний тип (Psychic)займає першість у Спеціальній атаці.\n              </li>\n              <li>\n                  Трійка найшвидших це Літаючий тип, Дракони та Електричний (причому Електричний на другому місці,хоча із логіки Струм швидший ніж Політ)\n              </li>\n              <li>\n                  Найбільшим захистом володіє Сталевий тип. Проте він володіє низькою швидкістю та помірно невисокими атаками.\n              </li>\n              <li>\n                  Fairy тип займає перше місце в плані Спеціального захисту. (Проте відставання Психічного дуже незначне).\n              </li>\n          </ul>\n      </p>\n      <p>Ця сторінка була розроблена як візуалізація балансу. Як бачимо, типи сильні у одній сфері показують середні,а то і слабкі результати в іншій. Разом із балансом типів це створює стабільну атмосферу.</p>\n        <BubbleChart/>\n    </div>)\n    }\n}\nexport default Legendary;","import React, { PureComponent } from 'react';\nimport {\n  ScatterChart, Scatter, XAxis, YAxis, CartesianGrid, Tooltip, Cell, ZAxis\n} from 'recharts';\nconst TypeToColor  = {\n    \"Normal\":\"#A8A77A\",\n    \"Fire\":  \"#EE8130\",\n    \"Water\":  \"#6390F0\",\n    \"Electric\":  \"#F7D02C\",\n    \"Grass\":  \"#7AC74C\",\n    \"Ice\":  \"#96D9D6\",\n    \"Fighting\":  \"#C22E28\",\n    \"Poison\":  \"#A33EA1\",\n    \"Ground\":  \"#E2BF65\",\n    \"Flying\":  \"#A98FF3\",\n    \"Psychic\":  \"#F95587\",\n    \"Bug\":  \"#A6B91A\",\n    \"Rock\":  \"#B6A136\",\n    \"Ghost\":  \"#735797\",\n    \"Dragon\":  \"#6F35FC\",\n    \"Dark\":  \"#705746\",\n    \"Steel\":  \"#B7B7CE\",\n    \"Fairy\":  \"#D685AD\", \n}\nexport default class BubbleChart extends PureComponent {\n    static jsfiddleUrl = 'https://jsfiddle.net/alidingling/9Lfxjjty/';\n\n    render() {\n        let legen_stats = [];\n        let sub_legend_stats = [];\n        let normal_stats = [];\n        let data_import = JSON.parse(localStorage.getItem('data'));\n            Object.entries(data_import).forEach(element => {\n                if (element[1][\"status\"] === \"Legendary\"){\n                    legen_stats.push({height:parseFloat(element[1][\"height_m\"]),weight:parseFloat(element[1][\"weight_kg\"]), name: element[1][\"name\"],type:element[1][\"type_1\"]})\n                }\n                if (element[1][\"status\"] === \"Sub Legendary\"){\n                    sub_legend_stats.push({height:parseFloat(element[1][\"height_m\"]),weight:parseFloat(element[1][\"weight_kg\"]), name: element[1][\"name\"],type:element[1][\"type_1\"]})\n                }\n                if (element[1][\"status\"] === \"Normal\"){\n                    normal_stats.push({height:parseFloat(element[1][\"height_m\"]),weight:parseFloat(element[1][\"weight_kg\"]), name: element[1][\"name\"],type:element[1][\"type_1\"]})\n                }\n        });\n      return (\n          <div className=\"chart_holder_edit\">\n              <div>\n                  <h3>Легендарні</h3>\n        <ScatterChart\n          width={400}\n          height={400}\n          margin={{\n            top: 20, right: 20, bottom: 20, left: 20,\n          }}\n        >\n          <CartesianGrid />\n          <XAxis type=\"number\" dataKey=\"height\" name=\"Height\" unit=\"m\"/>\n          <YAxis type=\"number\" dataKey=\"weight\" name=\"Weight\" unit=\"kg\"/>\n          <ZAxis type=\"category\" dataKey=\"name\" name=\"Name\"/>\n          <Tooltip cursor={{ strokeDasharray: '3 3' }}  />\n          <Scatter data={legen_stats} fill=\"#8884d8\">\n            {\n              legen_stats.map((entry, index) => <Cell key={`cell-${index}`} fill={TypeToColor[entry.type]} />)\n            }\n          </Scatter>\n        </ScatterChart>\n        </div>\n        <div>\n            <h3>Псевдо-легендарні</h3>\n        <ScatterChart\n          width={400}\n          height={400}\n          margin={{\n            top: 20, right: 20, bottom: 20, left: 20,\n          }}\n        >\n          <CartesianGrid />\n          <XAxis type=\"number\" dataKey=\"height\" name=\"Height\" unit=\"m\"/>\n          <YAxis type=\"number\" dataKey=\"weight\" name=\"Weight\" unit=\"kg\"/>\n          <ZAxis type=\"category\" dataKey=\"name\" name=\"Name\"/>\n          <Tooltip cursor={{ strokeDasharray: '3 3' }}  />\n          <Scatter data={sub_legend_stats} fill=\"#8884d8\">\n            {\n              sub_legend_stats.map((entry, index) => <Cell key={`cell-${index}`} fill={TypeToColor[entry.type]} />)\n            }\n          </Scatter>\n        </ScatterChart>\n        </div>\n        <div>\n            <h3>Звичайні</h3>\n        <ScatterChart\n          width={400}\n          height={400}\n          margin={{\n            top: 20, right: 20, bottom: 20, left: 20,\n          }}\n        >\n          <CartesianGrid />\n          <XAxis type=\"number\" dataKey=\"height\" name=\"Height\" unit=\"m\"/>\n          <YAxis type=\"number\" dataKey=\"weight\" name=\"Weight\" unit=\"kg\"/>\n          <ZAxis type=\"category\" dataKey=\"name\" name=\"Name\"/>\n          <Tooltip cursor={{ strokeDasharray: '3 3' }}  />\n          <Scatter data={normal_stats} fill=\"#8884d8\">\n            {\n              normal_stats.map((entry, index) => <Cell key={`cell-${index}`} fill={TypeToColor[entry.type]} />)\n            }\n          </Scatter>\n        </ScatterChart>\n        </div>\n        </div>\n      );\n    }\n  }\n  ","import React, { PureComponent } from 'react';\nimport {\n  PieChart, Pie, Cell, Tooltip, Legend\n} from 'recharts';\n\n\nconst RADIAN = Math.PI / 180;\nconst renderCustomizedLabel = ({\n  cx, cy, midAngle, innerRadius, outerRadius, percent, index,\n}) => {\n   const radius = innerRadius + (outerRadius - innerRadius) * 0.5;\n  const x = cx + radius * Math.cos(-midAngle * RADIAN);\n  const y = cy + radius * Math.sin(-midAngle * RADIAN);\n\n  return (\n    <text x={x} y={y} fill=\"white\" textAnchor={x > cx ? 'start' : 'end'} dominantBaseline=\"central\">\n      {`${(percent * 100).toFixed(0)}%`}\n    </text>\n  );\n};\nconst TypeToColor  = {\n    \"Normal\":\"#A8A77A\",\n    \"Fire\":  \"#EE8130\",\n    \"Water\":  \"#6390F0\",\n    \"Electric\":  \"#F7D02C\",\n    \"Grass\":  \"#7AC74C\",\n    \"Ice\":  \"#96D9D6\",\n    \"Fighting\":  \"#C22E28\",\n    \"Poison\":  \"#A33EA1\",\n    \"Ground\":  \"#E2BF65\",\n    \"Flying\":  \"#A98FF3\",\n    \"Psychic\":  \"#F95587\",\n    \"Bug\":  \"#A6B91A\",\n    \"Rock\":  \"#B6A136\",\n    \"Ghost\":  \"#735797\",\n    \"Dragon\":  \"#6F35FC\",\n    \"Dark\":  \"#705746\",\n    \"Steel\":  \"#B7B7CE\",\n    \"Fairy\":  \"#D685AD\", \n}\nexport default class LegendToType extends PureComponent {\n  static jsfiddleUrl = 'https://jsfiddle.net/alidingling/c9pL8k61/';\n\n  render() {\n    let data_import = JSON.parse(localStorage.getItem('data'));\n    let legend_to_type = [];\n    let found = false;\n    Object.entries(data_import).forEach(element => {\n        found = false;\n        if (element[1][\"status\"] === \"Legendary\"){\n            for (let index = 0; index < legend_to_type.length; index++) {\n                const e = legend_to_type[index];\n                if (element[1][\"type_1\"] === e.name){\n                    found = true;\n                    e.counter += 1;\n                    break;\n                }\n            }\n            if (!found){\n                legend_to_type.push({name:element[1][\"type_1\"],counter:1});\n            }\n        }\n    });\n    return (\n        <div>\n        <h3>Легендарні</h3>\n      <PieChart width={500} height={400}>\n        <Pie\n          data={legend_to_type}\n          cx={280}\n          cy={200}\n          labelLine={false}\n          label={renderCustomizedLabel}\n          outerRadius={150}\n          fill=\"#8884d8\"\n          dataKey=\"counter\"\n        >\n          {\n            legend_to_type.map((entry, index) => <Cell key={`cell-${index}`} fill={TypeToColor[entry.name]} />)\n          }\n        <Legend />\n          <Tooltip />\n\n        </Pie>\n      </PieChart>\n      </div>\n    );\n  }\n}\n","import React, { PureComponent } from 'react';\nimport {\n  PieChart, Pie, Cell, Tooltip, Legend\n} from 'recharts';\n\n\nconst RADIAN = Math.PI / 180;\nconst renderCustomizedLabel = ({\n  cx, cy, midAngle, innerRadius, outerRadius, percent, index,\n}) => {\n   const radius = innerRadius + (outerRadius - innerRadius) * 0.5;\n  const x = cx + radius * Math.cos(-midAngle * RADIAN);\n  const y = cy + radius * Math.sin(-midAngle * RADIAN);\n\n  return (\n    <text x={x} y={y} fill=\"white\" textAnchor={x > cx ? 'start' : 'end'} dominantBaseline=\"central\">\n      {`${(percent * 100).toFixed(0)}%`}\n    </text>\n  );\n};\nconst TypeToColor  = {\n    \"Normal\":\"#A8A77A\",\n    \"Fire\":  \"#EE8130\",\n    \"Water\":  \"#6390F0\",\n    \"Electric\":  \"#F7D02C\",\n    \"Grass\":  \"#7AC74C\",\n    \"Ice\":  \"#96D9D6\",\n    \"Fighting\":  \"#C22E28\",\n    \"Poison\":  \"#A33EA1\",\n    \"Ground\":  \"#E2BF65\",\n    \"Flying\":  \"#A98FF3\",\n    \"Psychic\":  \"#F95587\",\n    \"Bug\":  \"#A6B91A\",\n    \"Rock\":  \"#B6A136\",\n    \"Ghost\":  \"#735797\",\n    \"Dragon\":  \"#6F35FC\",\n    \"Dark\":  \"#705746\",\n    \"Steel\":  \"#B7B7CE\",\n    \"Fairy\":  \"#D685AD\", \n}\nexport default class PseudoLegendToType extends PureComponent {\n  static jsfiddleUrl = 'https://jsfiddle.net/alidingling/c9pL8k61/';\n\n  render() {\n    let data_import = JSON.parse(localStorage.getItem('data'));\n    let legend_to_type = [];\n    let found = false;\n    Object.entries(data_import).forEach(element => {\n        found = false;\n        if (element[1][\"status\"] === \"Sub Legendary\"){\n            for (let index = 0; index < legend_to_type.length; index++) {\n                const e = legend_to_type[index];\n                if (element[1][\"type_1\"] === e.name){\n                    found = true;\n                    e.counter += 1;\n                    break;\n                }\n            }\n            if (!found){\n                legend_to_type.push({name:element[1][\"type_1\"],counter:1});\n            }\n        }\n    });\n    return (\n        <div>\n        <h3>Псевдо-легендарні</h3>\n      <PieChart width={500} height={400}>\n        <Pie\n          data={legend_to_type}\n          cx={280}\n          cy={200}\n          labelLine={false}\n          label={renderCustomizedLabel}\n          outerRadius={150}\n          fill=\"#8884d8\"\n          dataKey=\"counter\"\n        >\n          {\n            legend_to_type.map((entry, index) => <Cell key={`cell-${index}`} fill={TypeToColor[entry.name]} />)\n          }\n        <Legend />\n          <Tooltip />\n\n        </Pie>\n      </PieChart>\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport '../style/home.css';\nimport BubbleChart from \"../charts/LegendBubble\";\nimport LegendToType from \"../charts/LegendToType\";\nimport PseudoLegendToType from \"../charts/PseudoLegendToType\";\nclass NewLeg extends React.Component{\n\n    render(){\n        return(\n    <div id=\"main_body\">\n      <h1>Опис сторінки:</h1>\n      <p>Ця сторінка була розроблена ля того,щоб дати відповідь на питання \"Що робить покемона легендарним?\" <br/>\n          Перші три графіки показують те,що розміри такі як вага чи зріст не впливають на відповідь<br/>\n      </p>\n      <BubbleChart/>\n      <p>\n          Наступне по чому можна було б визначити легенд (крім очевидно що характеристик, але тут ми намагаємося встановити кореляцію із іншими данними) це тип. <br/>\n      </p>\n      <div className=\"chart_holder\">\n\n          <LegendToType/>\n      <PseudoLegendToType/>\n      <ul>\n          <li>\n            Основні типи,які вирізняються це дракони та Психічний тип. Всі інші здебільшого збалансовані.\n          </li>\n          <li>\n            Також із цієї візуалізації можна сказати,що тип теж не показник легендарності.\n          </li>\n          <li>\n            Стосовно псевдо-легеднарних ситуація аналогічна,проте розподіл більш рівномірний\n          </li>\n          <li>\n            У статистиці був використаний лише основний тип.\n          </li>\n      </ul>\n      </div>\n      <p>Як наслідок,бачимо,що легендарність розповсюджується більш випадковим чином. На неї не впливає ні лінійні розміри ні тип.<br/>\n         Відповідно,бачимо,що згідно даних результатів жодної кореляції між побічними характеристиками немає.\n      </p>\n    </div>)\n    }\n}\nexport default NewLeg;","import React from \"react\";\nimport {\n  Route,\n  NavLink,\n  HashRouter\n} from \"react-router-dom\";\n\nimport Home from './components/Home';\nimport {useEffect} from 'react';\nimport { csv } from \"d3-fetch\";\nimport PokedexBasic from \"./components/PokedexBasic\";\nimport Legendary from \"./components/Legendary\";\nimport NewLeg from \"./components/NewLeg\";\n\nfunction App() {\n  useEffect(() => {\n    csv(process.env.PUBLIC_URL + `/pokedex.csv`).then((data) => {\n      if (localStorage.getItem(\"data\") !== null){\n        localStorage.clear();\n        localStorage.setItem(\"data\",JSON.stringify(data));\n      }\n  });\n  });\n  return (\n    <HashRouter>\n        <div>\n          <h1>Pokemon Visual World</h1>\n          <ul className=\"header\">\n            <li><NavLink to=\"/\">Домашня сторінка</NavLink></li>\n            <li><NavLink to=\"/pokedex_basic\">Pokedex</NavLink></li>\n            <li><NavLink to=\"/types_compare\">Порівняння типів</NavLink></li>\n            <li><NavLink to=\"/legendary\">Легендарність</NavLink></li>\n          </ul>\n          <div className=\"content\">\n            <Route exact path=\"/\" component={Home}/>\n            <Route path=\"/pokedex_basic\" component={PokedexBasic}/>\n            <Route path=\"/types_compare\" component={Legendary}/>\n            <Route path=\"/legendary\" component={NewLeg}/>\n          </div>\n        </div>\n      </HashRouter>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './style/index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}