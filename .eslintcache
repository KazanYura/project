[{"/home/yura/Downloads/project/src/index.js":"1","/home/yura/Downloads/project/src/App.js":"2","/home/yura/Downloads/project/src/components/Home.js":"3","/home/yura/Downloads/project/src/components/PokedexBasic.js":"4","/home/yura/Downloads/project/src/components/Legendary.js":"5","/home/yura/Downloads/project/src/components/NewLeg.js":"6","/home/yura/Downloads/project/src/charts/TableChart.js":"7","/home/yura/Downloads/project/src/charts/RadarStats.js":"8","/home/yura/Downloads/project/src/elements/Pokedex.js":"9","/home/yura/Downloads/project/src/charts/BubbleChart.js":"10","/home/yura/Downloads/project/src/charts/LegendBubble.js":"11","/home/yura/Downloads/project/src/charts/LegendToType.js":"12","/home/yura/Downloads/project/src/charts/PseudoLegendToType.js":"13"},{"size":225,"mtime":1607782986367,"results":"14","hashOfConfig":"15"},{"size":1421,"mtime":1609017867183,"results":"16","hashOfConfig":"15"},{"size":1075,"mtime":1609017243787,"results":"17","hashOfConfig":"15"},{"size":5239,"mtime":1608999883817,"results":"18","hashOfConfig":"15"},{"size":2992,"mtime":1609016885364,"results":"19","hashOfConfig":"15"},{"size":2460,"mtime":1609020076498,"results":"20","hashOfConfig":"15"},{"size":2714,"mtime":1608999652771,"results":"21","hashOfConfig":"15"},{"size":2050,"mtime":1608999931009,"results":"22","hashOfConfig":"15"},{"size":3317,"mtime":1608996081092,"results":"23","hashOfConfig":"15"},{"size":5248,"mtime":1609016075206,"results":"24","hashOfConfig":"15"},{"size":4216,"mtime":1609018867614,"results":"25","hashOfConfig":"15"},{"size":2490,"mtime":1609019943291,"results":"26","hashOfConfig":"15"},{"size":2513,"mtime":1609019955874,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"ecqru",{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"30"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"30"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"30"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"30"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/yura/Downloads/project/src/index.js",[],["59","60"],"/home/yura/Downloads/project/src/App.js",[],"/home/yura/Downloads/project/src/components/Home.js",[],"/home/yura/Downloads/project/src/components/PokedexBasic.js",[],"/home/yura/Downloads/project/src/components/Legendary.js",[],"/home/yura/Downloads/project/src/components/NewLeg.js",["61"],"import React from \"react\";\nimport '../style/home.css';\nimport BubbleChart from \"../charts/LegendBubble\";\nimport LegendToType from \"../charts/LegendToType\";\nimport { Legend } from \"recharts\";\nimport PseudoLegendToType from \"../charts/PseudoLegendToType\";\nclass NewLeg extends React.Component{\n\n    render(){\n        return(\n    <div id=\"main_body\">\n      <h1>Опис сторінки:</h1>\n      <p>Ця сторінка була розроблена ля того,щоб дати відповідь на питання \"Що робить покемона легендарним?\" <br/>\n          Перші три графіки показують те,що розміри такі як вага чи зріст не впливають на відповідь<br/>\n      </p>\n      <BubbleChart/>\n      <p>\n          Наступне по чому можна було б визначити легенд (крім очевидно що характеристик, але тут ми намагаємося встановити кореляцію із іншими данними) це тип. <br/>\n      </p>\n      <div className=\"chart_holder\">\n\n          <LegendToType/>\n      <PseudoLegendToType/>\n      <ul>\n          <li>\n            Основні типи,які вирізняються це дракони та Психічний тип. Всі інші здебільшого збалансовані.\n          </li>\n          <li>\n            Також із цієї візуалізації можна сказати,що тип теж не показник легендарності.\n          </li>\n          <li>\n            Стосовно псевдо-легеднарних ситуація аналогічна,проте розподіл більш рівномірний\n          </li>\n          <li>\n            У статистиці був використаний лише основний тип.\n          </li>\n      </ul>\n      </div>\n      <p>Як наслідок,бачимо,що легендарність розповсюджується більш випадковим чином. На неї не впливає ні лінійні розміри ні тип.<br/>\n         Відповідно,бачимо,що згідно даних результатів жодної кореляції між побічними характеристиками немає.\n      </p>\n    </div>)\n    }\n}\nexport default NewLeg;","/home/yura/Downloads/project/src/charts/TableChart.js",[],"/home/yura/Downloads/project/src/charts/RadarStats.js",["62","63"],"import { max } from 'date-fns';\nimport React, { PureComponent } from 'react';\n\nimport {\n  Radar, RadarChart, PolarGrid, PolarAngleAxis, PolarRadiusAxis,\n} from 'recharts';\n\nexport default class RadarStats extends PureComponent {\n    static jsfiddleUrl = 'https://jsfiddle.net/alidingling/6ebcxbx4/';  \n    render(){\n        let pokemon = this.props.pokemon;\n      let data = [              \n        {field:\"HP\",value : parseInt(pokemon[\"hp\"])},\n        {field:\"Attack\", value :  parseInt(pokemon[\"attack\"])},\n        {field:\"Defense\",value: parseInt(pokemon[\"defense\"])},\n        {field:\"Special Attack\",value: parseInt(pokemon[\"sp_attack\"])},\n        {field:\"Special Defense\",value: parseInt(pokemon[\"sp_defense\"])},\n        {field:\"Speed\",value: parseInt(pokemon[\"speed\"])}];\n        let message = \"\";\n        let stats = [parseInt(pokemon[\"attack\"]), parseInt(pokemon[\"defense\"]),parseInt(pokemon[\"sp_attack\"]),parseInt(pokemon[\"sp_defense\"]) ]\n        console.log(stats)\n        switch (Math.max(...stats)){\n            case parseInt(pokemon[\"attack\"]):\n                message = \"Pokemon \" + pokemon[\"name\"] + \" is physical damager\";\n                break;\n            case parseInt(pokemon[\"defense\"]):\n                message = \"Pokemon \" + pokemon[\"name\"] + \" is physical tank\";\n                break;\n            case parseInt(pokemon[\"sp_attack\"]):\n                message = \"Pokemon \" + pokemon[\"name\"] + \" is special damager\";\n                break;\n            case parseInt(pokemon[\"sp_defense\"]):\n                message = \"Pokemon \" + pokemon[\"name\"] + \" is special tank\";\n                break;\n        }\n    console.log('Messga' + message)\n      return (\n          <div>\n            <h3>{message}</h3>\n        <RadarChart cx={400} cy={180} outerRadius={150} width={600} height={450} data={data}>\n          <PolarGrid />\n          <PolarAngleAxis dataKey=\"field\" />\n          <PolarRadiusAxis />\n          <Radar dataKey=\"value\" stroke=\"#8884d8\" fill=\"#8884d8\" fillOpacity={0.6} />\n        </RadarChart>\n        </div>\n      );\n  }\n}","/home/yura/Downloads/project/src/elements/Pokedex.js",["64"],"import React, { memo } from \"react\";\n\nconst TypeToColor  = {\n    \"Normal\":\"#A8A77A\",\n    \"Fire\":  \"#EE8130\",\n    \"Water\":  \"#6390F0\",\n    \"Electric\":  \"#F7D02C\",\n    \"Grass\":  \"#7AC74C\",\n    \"Ice\":  \"#96D9D6\",\n    \"Fighting\":  \"#C22E28\",\n    \"Poison\":  \"#A33EA1\",\n    \"Ground\":  \"#E2BF65\",\n    \"Flying\":  \"#A98FF3\",\n    \"Psychic\":  \"#F95587\",\n    \"Bug\":  \"#A6B91A\",\n    \"Rock\":  \"#B6A136\",\n    \"Ghost\":  \"#735797\",\n    \"Dragon\":  \"#6F35FC\",\n    \"Dark\":  \"#705746\",\n    \"Steel\":  \"#B7B7CE\",\n    \"Fairy\":  \"#D685AD\", \n}\nconst MapChart = ({ pokemon }) => {\n    let imageName;\n\n    if (pokemon[\"name\"].includes(\"Mega \")){\n        if ((pokemon[\"name\"].includes(\"Mega \")) && (pokemon[\"name\"].includes(\" X\")))\n        imageName = pokemon[\"pokedex_number\"] + \"-mega-x\";\n        else {\n            if ((pokemon[\"name\"].includes(\"Mega \")) && (pokemon[\"name\"].includes(\" Y\")))\n            imageName = pokemon[\"pokedex_number\"] + \"-mega-y\";\n            else \n            imageName = pokemon[\"pokedex_number\"] + \"-mega\";\n        }\n    }\n    else {\n        imageName = pokemon[\"pokedex_number\"]\n    }\n  return (\n    <>\n    <div className=\"pokedex\" style={{backgroundColor:TypeToColor[pokemon[\"type_1\"]], textAlign:\"center\", width:\"350px\",float:\"right\",border:\"3px solid black\"}}>\n        <div className=\"nameHolder\" style={{padding:\"5%\"}}>\n            <h2>#{pokemon[\"pokedex_number\"]}  {pokemon[\"name\"]}</h2>\n        </div>\n        <div className=\"imageHolder\" style={{borderTop:\"3px solid black\",padding:\"5%\"}}>\n            <img src={process.env.PUBLIC_URL + \"/images/pokemon_jpg/\" + imageName + \".jpg\"}/>\n        </div>\n        <div className=\"statsHolder\" style={{paddingBottom:\"20px\"}}>\n            <div style={{borderTop:\"3px solid black\"}}>\n            <h3>Type</h3>\n            <ul>\n                <li>\n                    {pokemon[\"type_1\"]}\n                    </li>\n                    <li>\n                        {pokemon[\"type_2\"]}\n                    </li>\n                </ul>\n            </div>\n            <div style={{borderTop:\"3px solid black\"}}>\n            <h3>Abilities:</h3>\n                <ul>\n                    <li>\n                        {pokemon[\"ability_1\"]}\n                    </li>\n                    <li>\n                        {pokemon[\"ability_2\"]}\n                    </li>\n                    <li>\n                        {pokemon[\"ability_hidden\"]}\n                    </li>\n                </ul>\n                </div>\n                <div style={{borderTop:\"3px solid black\"}}>\n                <h3>Stats:</h3>\n                <ul>\n                    <li>\n                        HP: {pokemon[\"hp\"]}\n                    </li>\n                    <li>\n                        Attack: {pokemon[\"attack\"]}\n                    </li>\n                    <li>\n                        Defense: {pokemon[\"defense\"]}\n                    </li>\n                    <li>\n                        Special Attack: {pokemon[\"sp_attack\"]}\n                    </li>\n                    <li>\n                        Special Defense: {pokemon[\"sp_defense\"]}\n                    </li>\n                    <li>\n                        Speed: {pokemon[\"speed\"]}\n                    </li>\n                </ul>\n                </div>\n        </div>\n    </div>\n    </>\n  );\n};\n\nexport default memo(MapChart);","/home/yura/Downloads/project/src/charts/BubbleChart.js",["65"],"import React, { PureComponent } from 'react';\nimport {\n  ScatterChart, Scatter, XAxis, YAxis, CartesianGrid, Tooltip, Cell,Legend, ZAxis\n} from 'recharts';\nconst TypeToColor  = {\n    \"Normal\":\"#A8A77A\",\n    \"Fire\":  \"#EE8130\",\n    \"Water\":  \"#6390F0\",\n    \"Electric\":  \"#F7D02C\",\n    \"Grass\":  \"#7AC74C\",\n    \"Ice\":  \"#96D9D6\",\n    \"Fighting\":  \"#C22E28\",\n    \"Poison\":  \"#A33EA1\",\n    \"Ground\":  \"#E2BF65\",\n    \"Flying\":  \"#A98FF3\",\n    \"Psychic\":  \"#F95587\",\n    \"Bug\":  \"#A6B91A\",\n    \"Rock\":  \"#B6A136\",\n    \"Ghost\":  \"#735797\",\n    \"Dragon\":  \"#6F35FC\",\n    \"Dark\":  \"#705746\",\n    \"Steel\":  \"#B7B7CE\",\n    \"Fairy\":  \"#D685AD\", \n}\nexport default class BubbleChart extends PureComponent {\n    static jsfiddleUrl = 'https://jsfiddle.net/alidingling/9Lfxjjty/';\n  \n    render() {\n        let data_import = JSON.parse(localStorage.getItem('data'));\n        let type_to_stats = [];\n            Object.entries(data_import).forEach(element => {\n                let found = false;\n                for (let index = 0; index < type_to_stats.length; index++) {\n                    let e = type_to_stats[index];\n                    if (e.type === element[1][\"type_1\"]){\n                        e.spa += parseInt(element[1][\"sp_attack\"]);\n                        e.a += parseInt(element[1][\"attack\"]);\n                        e.speed += parseInt(element[1][\"speed\"]);\n                        e.def += parseInt(element[1][\"defense\"])\n                        e.spdef += parseInt(element[1][\"sp_defense\"])\n                        e.c += 1;\n                        found = true;\n                        break;\n                    }\n                    \n                }\n                if (!found){\n                    type_to_stats.push({type:element[1][\"type_1\"],spa:parseInt(element[1][\"sp_attack\"]),a:parseInt(element[1][\"attack\"]),speed:parseInt(element[1][\"speed\"]),c:1,spdef:parseInt(element[1][\"sp_defense\"]),def:parseInt(element[1][\"defense\"])})\n                }\n\n        });\n        console.log(type_to_stats)\n        for (let index = 0; index < type_to_stats.length; index++) {\n            const element = type_to_stats[index];\n            element.spa = (element.spa / element.c);\n            element.a = (element.a / element.c);\n            element.def = (element.def / element.c);\n            element.spdef = (element.spdef / element.c);\n            element.speed = (element.speed / element.c);\n            \n        }\n      return (\n          <div className=\"chart_holder_edit\">\n        <ScatterChart\n          width={400}\n          height={400}\n          margin={{\n            top: 20, right: 20, bottom: 20, left: 20,\n          }}\n        >\n          <CartesianGrid />\n          <XAxis type=\"number\" dataKey=\"a\" name=\"Attack\"/>\n          <YAxis type=\"number\" dataKey=\"speed\" name=\"Speed\"/>\n          <ZAxis type=\"category\" dataKey=\"type\" name=\"Type\"/>\n          <Tooltip cursor={{ strokeDasharray: '3 3' }}  />\n          <Scatter data={type_to_stats} fill=\"#8884d8\">\n            {\n              type_to_stats.map((entry, index) => <Cell key={`cell-${index}`} fill={TypeToColor[entry.type]} />)\n            }\n          </Scatter>\n        </ScatterChart>\n        <ScatterChart\n          width={400}\n          height={400}\n          margin={{\n            top: 20, right: 20, bottom: 20, left: 20,\n          }}\n        >\n          <CartesianGrid />\n          <XAxis type=\"number\" dataKey=\"spa\" name=\"Special Attack\"/>\n          <YAxis type=\"number\" dataKey=\"speed\" name=\"Speed\"/>\n          <ZAxis type=\"category\" dataKey=\"type\" name=\"Type\"/>\n          <Tooltip cursor={{ strokeDasharray: '3 3' }}  />\n          <Scatter data={type_to_stats} fill=\"#8884d8\">\n            {\n              type_to_stats.map((entry, index) => <Cell key={`cell-${index}`} fill={TypeToColor[entry.type]} />)\n            }\n          </Scatter>\n        </ScatterChart>\n        <ScatterChart\n          width={400}\n          height={400}\n          margin={{\n            top: 20, right: 20, bottom: 20, left: 20,\n          }}\n        >\n          <CartesianGrid />\n          <XAxis type=\"number\" dataKey=\"def\" name=\"Defense\"/>\n          <YAxis type=\"number\" dataKey=\"speed\" name=\"Speed\"/>\n          <ZAxis type=\"category\" dataKey=\"type\" name=\"Type\"/>\n          <Tooltip cursor={{ strokeDasharray: '3 3' }}  />\n          <Scatter data={type_to_stats} fill=\"#8884d8\">\n            {\n              type_to_stats.map((entry, index) => <Cell key={`cell-${index}`} fill={TypeToColor[entry.type]} />)\n            }\n          </Scatter>\n        </ScatterChart>\n        <ScatterChart\n          width={400}\n          height={400}\n          margin={{\n            top: 20, right: 20, bottom: 20, left: 20,\n          }}\n        >\n          <CartesianGrid />\n          <XAxis type=\"number\" dataKey=\"spdef\" name=\"Special Defense\"/>\n          <YAxis type=\"number\" dataKey=\"speed\" name=\"Speed\"/>\n          <ZAxis type=\"category\" dataKey=\"type\" name=\"Type\"/>\n          <Tooltip cursor={{ strokeDasharray: '3 3' }}  />\n          <Scatter data={type_to_stats} fill=\"#8884d8\">\n            {\n              type_to_stats.map((entry, index) => <Cell key={`cell-${index}`} fill={TypeToColor[entry.type]} />)\n            }\n          </Scatter>\n        </ScatterChart>\n        </div>\n      );\n    }\n  }\n  ","/home/yura/Downloads/project/src/charts/LegendBubble.js",[],"/home/yura/Downloads/project/src/charts/LegendToType.js",[],"/home/yura/Downloads/project/src/charts/PseudoLegendToType.js",[],{"ruleId":"66","replacedBy":"67"},{"ruleId":"68","replacedBy":"69"},{"ruleId":"70","severity":1,"message":"71","line":5,"column":10,"nodeType":"72","messageId":"73","endLine":5,"endColumn":16},{"ruleId":"70","severity":1,"message":"74","line":1,"column":10,"nodeType":"72","messageId":"73","endLine":1,"endColumn":13},{"ruleId":"75","severity":1,"message":"76","line":22,"column":9,"nodeType":"77","messageId":"78","endLine":35,"endColumn":10},{"ruleId":"79","severity":1,"message":"80","line":46,"column":13,"nodeType":"81","endLine":46,"endColumn":94},{"ruleId":"70","severity":1,"message":"71","line":3,"column":69,"nodeType":"72","messageId":"73","endLine":3,"endColumn":75},"no-native-reassign",["82"],"no-negated-in-lhs",["83"],"no-unused-vars","'Legend' is defined but never used.","Identifier","unusedVar","'max' is defined but never used.","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-global-assign","no-unsafe-negation"]